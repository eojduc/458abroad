plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
}
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-config'
	implementation 'org.postgresql:postgresql'
	implementation 'org.jsoup:jsoup:1.17.2' // use latest stable version
	implementation 'org.apache.commons:commons-csv:1.10.0'
	implementation 'org.commonmark:commonmark:0.24.0' // markdown parser
	implementation 'com.warrenstrange:googleauth:1.0.0' // google mfa auth
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

task resetDb {
	doFirst {
		// First make the script executable
		file('resetdb.sh').setExecutable(true)

		// Then run it
		exec {
			workingDir '.'
			if (System.getProperty('os.name').toLowerCase().contains('windows')) {
				commandLine 'cmd', '/c', 'resetDb.sh'
			} else {
				commandLine 'sh', './resetDb.sh'
			}
		}
	}

}

tasks.test {
	useJUnitPlatform()
}


// Ensure clean runs first when using the `start` task
tasks.named("bootJar") {
	mustRunAfter "clean"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

sourceSets {
	main {
		resources {
			srcDirs = ['src/main/resources']
		}
	}
}


repositories {
	mavenCentral()
}